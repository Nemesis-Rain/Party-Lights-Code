// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":37125,"type":"Slider","state":{"id":"Slider1","x":3.5,"y":12,"w":4,"h":1,"css":{},"color":"#008000","fontSize":16,"min":0,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":33749,"type":"Button","state":{"id":"Button1","x":4,"y":2,"w":3,"h":1,"css":{},"text":"Červená","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}},{"uuid":6938,"type":"Button","state":{"id":"Button2","x":4,"y":4,"w":3,"h":1,"css":{},"text":"Ledová růže","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}},{"uuid":17755,"type":"Button","state":{"id":"Button3","x":4,"y":6,"w":3,"h":1,"css":{},"text":"Oheň","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}},{"uuid":17680,"type":"Button","state":{"id":"Button4","x":4,"y":8,"w":3,"h":1,"css":{},"text":"Duha","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}},{"uuid":4454,"type":"Button","state":{"id":"Button5","x":4,"y":10,"w":3,"h":1,"css":{},"text":"Vypnout","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Slider1(
            UI.slider(3.5, 12, 4, 1, 37125)
        ),
        Button1(
            UI.button(4, 2, 3, 1, 33749)
                .text("Červená růže")
        ),
        Button2(
            UI.button(4, 4, 3, 1, 6938)
                .text("Ledová růže")
        ),
        Button3(
            UI.button(4, 6, 3, 1, 17755)
                .text("Disco růže")
        ),
        Button4(
            UI.button(4, 8, 3, 1, 17680)
                .text("Duhová růže")
        )
    {
    }

public:
    void commit();

    Slider& Slider1;
    Button& Button1;
    Button& Button2;
    Button& Button3;
    Button& Button4;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Slider Slider1;
    Button Button1;
    Button Button2;
    Button Button3;
    Button Button4;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Slider1 = Slider1.finish();
    Layout.Button1 = Button1.finish();
    Layout.Button2 = Button2.finish();
    Layout.Button3 = Button3.finish();
    Layout.Button4 = Button4.finish();
    UI.commit();
}

};

};